<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace orb\orb\Models\Operations;

use \orb\orb\Utils\SpeakeasyMetadata;
class FetchSubscriptionUsageRequest
{
    /**
     * When specified in conjunction with `group_by`, this parameter filters usage to a single billable metric. Note that both `group_by` and `billable_metric_id` must be specific together.
     * 
     * @var ?string $billableMetricId
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=billable_metric_id')]
    public ?string $billableMetricId = null;
    
    /**
     * This determines the windowing of usage reporting.
     * 
     * @var ?\orb\orb\Models\Operations\FetchSubscriptionUsageGranularity $granularity
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=granularity')]
    public ?FetchSubscriptionUsageGranularity $granularity = null;
    
    /**
     * When specified in conjunction with `billable_metric_id`, this parameter groups by the key provided. Note that both `group_by` and `billable_metric_id` must be specific together.
     * 
     * @var ?string $groupBy
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=group_by')]
    public ?string $groupBy = null;
    
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=subscription_id')]
    public string $subscriptionId;
    
    /**
     * Usage returned is _exclusive_ of `timeframe_end`
     * 
     * @var ?\DateTime $timeframeEnd
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=timeframe_end,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $timeframeEnd = null;
    
    /**
     * Usage returned is _inclusive_ of `timeframe_start`
     * 
     * @var ?\DateTime $timeframeStart
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=timeframe_start,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $timeframeStart = null;
    
    /**
     * `periodic` returns usage for each window (configured by `granularity`) and `cumulative` returns the usage since the beginning of the billing period. The default is `periodic`.
     * 
     * @var ?\orb\orb\Models\Operations\FetchSubscriptionUsageViewMode $viewMode
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=view_mode')]
    public ?FetchSubscriptionUsageViewMode $viewMode = null;
    
	public function __construct()
	{
		$this->billableMetricId = null;
		$this->granularity = null;
		$this->groupBy = null;
		$this->subscriptionId = "";
		$this->timeframeEnd = null;
		$this->timeframeStart = null;
		$this->viewMode = null;
	}
}
