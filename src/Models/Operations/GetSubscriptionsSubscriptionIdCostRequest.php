<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace Orb\Orb\Models\Operations;

use \Orb\Orb\Utils\SpeakeasyMetadata;
class GetSubscriptionsSubscriptionIdCostRequest
{
    /**
     * Groups per-price costs by the key provided.
     * 
     * @var ?string $groupBy
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=group_by')]
    public ?string $groupBy = null;
    
	#[SpeakeasyMetadata('pathParam:style=simple,explode=false,name=subscription_id')]
    public string $subscriptionId;
    
    /**
     * Revenue returned is _exclusive_ of `timeframe_end`
     * 
     * @var ?\DateTime $timeframeEnd
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=timeframe_end,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $timeframeEnd = null;
    
    /**
     * Revenue returned is _inclusive_ of `timeframe_start`
     * 
     * @var ?\DateTime $timeframeStart
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=timeframe_start,dateTimeFormat=Y-m-d\TH:i:s.up')]
    public ?\DateTime $timeframeStart = null;
    
    /**
     * Controls whether Orb returns cumulative costs since the start of the billing period, or incremental day-by-day costs. If your customer has minimums or discounts, it's strongly recommended that you use the default cumulative behavior.
     * 
     * @var ?string $viewMode
     */
	#[SpeakeasyMetadata('queryParam:style=form,explode=true,name=view_mode')]
    public ?string $viewMode = null;
    
	public function __construct()
	{
		$this->groupBy = null;
		$this->subscriptionId = "";
		$this->timeframeEnd = null;
		$this->timeframeStart = null;
		$this->viewMode = null;
	}
}
