<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace orb\orb\Models\Shared;


/**
 * Invoice - An [`Invoice`](../reference/Orb-API.json/components/schemas/Invoice) is a fundamental billing entity, representing the request for payment for a single subscription. This includes a set of line items, which correspond to prices in the subscription's plan and can represent fixed recurring fees or usage-based fees. They are generated at the end of a billing period, or as the result of an action, such as a cancellation.
 * 
 * @package orb\orb\Models\Shared
 * @access public
 */
class Invoice
{
    /**
     * This is the final amount required to be charged to the customer and reflects the application of the customer balance to the `total` of the invoice.
     * 
     * @var string $amountDue
     */
	#[\JMS\Serializer\Annotation\SerializedName('amount_due')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $amountDue;
    
    /**
     * The creation time of the resource in Orb.
     * 
     * @var \DateTime $createdAt
     */
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * An ISO 4217 currency string or `credits`
     * 
     * @var string $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $currency;
    
    /**
     * The customer receiving this invoice.
     * 
     * @var \orb\orb\Models\Shared\InvoiceCustomer $customer
     */
	#[\JMS\Serializer\Annotation\SerializedName('customer')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\InvoiceCustomer')]
    public InvoiceCustomer $customer;
    
    /**
     * A list of Customer balance transactions that may be associated with this invoice.
     * 
     * @var array<\orb\orb\Models\Shared\CustomerBalanceTransaction> $customerBalanceTransactions
     */
	#[\JMS\Serializer\Annotation\SerializedName('customer_balance_transactions')]
    #[\JMS\Serializer\Annotation\Type('array<orb\orb\Models\Shared\CustomerBalanceTransaction>')]
    public array $customerBalanceTransactions;
    
    /**
     * $discount
     * 
     * @var array<string, mixed> $discount
     */
	#[\JMS\Serializer\Annotation\SerializedName('discount')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    public array $discount;
    
    /**
     * When the invoice payment is due.
     * 
     * @var \DateTime $dueDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('due_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $dueDate;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * Issue date of the invoice
     * 
     * @var \DateTime $invoiceDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('invoice_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $invoiceDate;
    
    /**
     * The link to download the PDF representation of the `Invoice`.
     * 
     * @var string $invoicePdf
     */
	#[\JMS\Serializer\Annotation\SerializedName('invoice_pdf')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $invoicePdf;
    
    /**
     * The breakdown of prices in this invoice.
     * 
     * @var array<\orb\orb\Models\Shared\InvoiceLineItems> $lineItems
     */
	#[\JMS\Serializer\Annotation\SerializedName('line_items')]
    #[\JMS\Serializer\Annotation\Type('array<orb\orb\Models\Shared\InvoiceLineItems>')]
    public array $lineItems;
    
    /**
     * $minimum
     * 
     * @var array<string, mixed> $minimum
     */
	#[\JMS\Serializer\Annotation\SerializedName('minimum')]
    #[\JMS\Serializer\Annotation\Type('array<string, mixed>')]
    public array $minimum;
    
    /**
     * The status of this invoice as known to Orb. Invoices that have been issued for past billing periods are marked `"issued"`. Invoices will be marked `"paid"` upon confirmation of successful automatic payment collection by Orb. Invoices synced to an external billing provider (such as Bill.com, QuickBooks, or Stripe Invoicing) will be marked as `"synced"`.
     * 
     * @var ?\orb\orb\Models\Shared\InvoiceStatusEnum $status
     */
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<orb\orb\Models\Shared\InvoiceStatusEnum>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?InvoiceStatusEnum $status = null;
    
    /**
     * The associated subscription for this invoice.
     * 
     * @var \orb\orb\Models\Shared\InvoiceSubscription $subscription
     */
	#[\JMS\Serializer\Annotation\SerializedName('subscription')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\InvoiceSubscription')]
    public InvoiceSubscription $subscription;
    
    /**
     * The total before any discounts and minimums are applied.
     * 
     * @var string $subtotal
     */
	#[\JMS\Serializer\Annotation\SerializedName('subtotal')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $subtotal;
    
    /**
     * The total after any minimums, discounts, and taxes have been applied.
     * 
     * @var string $total
     */
	#[\JMS\Serializer\Annotation\SerializedName('total')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $total;
    
	public function __construct()
	{
		$this->amountDue = "";
		$this->createdAt = new \DateTime();
		$this->currency = "";
		$this->customer = new \orb\orb\Models\Shared\InvoiceCustomer();
		$this->customerBalanceTransactions = [];
		$this->discount = [];
		$this->dueDate = new \DateTime();
		$this->id = "";
		$this->invoiceDate = new \DateTime();
		$this->invoicePdf = "";
		$this->lineItems = [];
		$this->minimum = [];
		$this->status = null;
		$this->subscription = new \orb\orb\Models\Shared\InvoiceSubscription();
		$this->subtotal = "";
		$this->total = "";
	}
}
