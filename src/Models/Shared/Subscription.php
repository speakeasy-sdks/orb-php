<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace orb\orb\Models\Shared;


/**
 * Subscription - A subscription represents the purchase of a plan by a customer.
 * 
 * 
 * By default, subscriptions begin on the day that they're created and renew automatically for each billing cycle at the cadence that's configured in the plan definition.
 * 
 * Subscriptions also default to **beginning of month alignment**, which means the first invoice issued for the subscription will have pro-rated charges between the `start_date` and the first of the following month. Subsequent billing periods will always start and end on a month boundary (e.g. subsequent month starts for monthly billing).
 * 
 * Depending on the plan configuration, any _flat_ recurring fees will be billed either at the beginning (in-advance) or end (in-arrears) of each billing cycle. Plans default to **in-advance billing**. Usage-based fees are billed in arrears as usage is accumulated. In the normal course of events, you can expect an invoice to contain usage-based charges for the previous period, and a recurring fee for the following period.
 * 
 * @package orb\orb\Models\Shared
 * @access public
 */
class Subscription
{
    /**
     * The current plan phase that is active, only if the subscription's plan has phases.
     * 
     * @var ?float $activePlanPhaseOrder
     */
	#[\JMS\Serializer\Annotation\SerializedName('active_plan_phase_order')]
    #[\JMS\Serializer\Annotation\Type('float')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?float $activePlanPhaseOrder = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * The end of the current billing period. This is an exclusive timestamp, such that the instant returned is not part of the billing period. Set to null for subscriptions that are not currently active.
     * 
     * @var ?\DateTime $currentBillingPeriodEndDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('current_billing_period_end_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $currentBillingPeriodEndDate = null;
    
    /**
     * The start of the current billing period. This is an inclusive timestamp; the instant returned is exactly the beginning of the billing period. Set to null if the subscription is not currently active.
     * 
     * @var ?\DateTime $currentBillingPeriodStartDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('current_billing_period_start_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?\DateTime $currentBillingPeriodStartDate = null;
    
    /**
     * A customer is a buyer of your products, and the other party to the billing relationship.
     * 
     * 
     * In Orb, customers are assigned system generated identifiers automatically, but it's often desirable to have these match existing identifiers in your system. To avoid having to denormalize Orb ID information, you can pass in an `external_customer_id` with your own identifier. See [Customer ID Aliases](../docs/Customer-ID-Aliases.md) for further information about how these aliases work in Orb.
     * 
     * In addition to having an identifier in your system, a customer may exist in a payment provider solution like Stripe. Use the `payment_provider_id` and the `payment_provider` enum field to express this mapping.
     * 
     * A customer also has a timezone (from the standard [IANA timezone database](https://www.iana.org/time-zones)), which defaults to your account's timezone. See [Timezone localization](../docs/Timezone-localization.md) for information on what this timezone parameter influences within Orb.
     * 
     * @var \orb\orb\Models\Shared\Customer $customer
     */
	#[\JMS\Serializer\Annotation\SerializedName('customer')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\Customer')]
    public Customer $customer;
    
    /**
     * The date Orb stops billing for this subscription.
     * 
     * @var \DateTime $endDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('end_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $endDate;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
	#[\JMS\Serializer\Annotation\SerializedName('plan')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\Plan')]
    public Plan $plan;
    
    /**
     * The date Orb starts billing for this subscription.
     * 
     * @var \DateTime $startDate
     */
	#[\JMS\Serializer\Annotation\SerializedName('start_date')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $startDate;
    
	#[\JMS\Serializer\Annotation\SerializedName('status')]
    #[\JMS\Serializer\Annotation\Type('enum<orb\orb\Models\Shared\SubscriptionStatusEnum>')]
    public SubscriptionStatusEnum $status;
    
	public function __construct()
	{
		$this->activePlanPhaseOrder = null;
		$this->createdAt = new \DateTime();
		$this->currentBillingPeriodEndDate = null;
		$this->currentBillingPeriodStartDate = null;
		$this->customer = new \orb\orb\Models\Shared\Customer();
		$this->endDate = new \DateTime();
		$this->id = "";
		$this->plan = new \orb\orb\Models\Shared\Plan();
		$this->startDate = new \DateTime();
		$this->status = \orb\orb\Models\Shared\SubscriptionStatusEnum::ACTIVE;
	}
}
