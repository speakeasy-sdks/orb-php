<?php

/**
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

declare(strict_types=1);

namespace orb\orb\Models\Shared;


/**
 * Plan - OK
 * 
 * @package orb\orb\Models\Shared
 * @access public
 */
class Plan
{
    /**
     * The parent plan if the given plan was created by overriding one or more of the parent's prices
     * 
     * @var ?\orb\orb\Models\Shared\PlanBasePlan $basePlan
     */
	#[\JMS\Serializer\Annotation\SerializedName('base_plan')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\PlanBasePlan')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PlanBasePlan $basePlan = null;
    
    /**
     * The parent plan id if the given plan was created by overriding one or more of the parent's prices
     * 
     * @var ?string $basePlanId
     */
	#[\JMS\Serializer\Annotation\SerializedName('base_plan_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $basePlanId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('created_at')]
    #[\JMS\Serializer\Annotation\Type("DateTime<'Y-m-d\TH:i:s.up'>")]
    public \DateTime $createdAt;
    
    /**
     * An ISO 4217 currency string or custom pricing unit (`credits`) for this plan's prices.
     * 
     * @var string $currency
     */
	#[\JMS\Serializer\Annotation\SerializedName('currency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $currency;
    
    /**
     * The default memo text on the invoices corresponding to subscriptions on this plan. Note that each subscription may configure its own memo.
     * 
     * @var ?string $defaultInvoiceMemo
     */
	#[\JMS\Serializer\Annotation\SerializedName('default_invoice_memo')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $defaultInvoiceMemo = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('description')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $description;
    
	#[\JMS\Serializer\Annotation\SerializedName('discount')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\Discount')]
    public Discount $discount;
    
    /**
     * An optional user-defined ID for this plan resource, used throughout the system as an alias for this Plan. Use this field to identify a plan by an existing identifier in your system.
     * 
     * @var ?string $externalPlanId
     */
	#[\JMS\Serializer\Annotation\SerializedName('external_plan_id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?string $externalPlanId = null;
    
	#[\JMS\Serializer\Annotation\SerializedName('id')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $id;
    
    /**
     * An ISO 4217 currency string for which this plan is billed in. Matches `currency` unless `currency` is a custom pricing unit.
     * 
     * @var string $invoicingCurrency
     */
	#[\JMS\Serializer\Annotation\SerializedName('invoicing_currency')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $invoicingCurrency;
    
	#[\JMS\Serializer\Annotation\SerializedName('minimum')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\MinimumAmount')]
    public MinimumAmount $minimum;
    
	#[\JMS\Serializer\Annotation\SerializedName('name')]
    #[\JMS\Serializer\Annotation\Type('string')]
    public string $name;
    
    /**
     * Determines the difference between the invoice issue date and the due date. A value of "0" here signifies that invoices are due on issue, whereas a value of "30" means that the customer has a month to pay the invoice before its overdue. Note that individual subscriptions or invoices may set a different net terms configuration.
     * 
     * @var ?int $netTerms
     */
	#[\JMS\Serializer\Annotation\SerializedName('net_terms')]
    #[\JMS\Serializer\Annotation\Type('int')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?int $netTerms = null;
    
    /**
     * $planPhases
     * 
     * @var ?array<\orb\orb\Models\Shared\PlanPhase> $planPhases
     */
	#[\JMS\Serializer\Annotation\SerializedName('plan_phases')]
    #[\JMS\Serializer\Annotation\Type('array<orb\orb\Models\Shared\PlanPhase>')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?array $planPhases = null;
    
    /**
     * Prices for this plan. If the plan has phases, this includes prices across all phases of the plan. 
     * 
     * @var array<\orb\orb\Models\Shared\Price> $prices
     */
	#[\JMS\Serializer\Annotation\SerializedName('prices')]
    #[\JMS\Serializer\Annotation\Type('array<orb\orb\Models\Shared\Price>')]
    public array $prices;
    
	#[\JMS\Serializer\Annotation\SerializedName('product')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\PlanProduct')]
    public PlanProduct $product;
    
	#[\JMS\Serializer\Annotation\SerializedName('trial_config')]
    #[\JMS\Serializer\Annotation\Type('orb\orb\Models\Shared\PlanTrialConfig')]
    #[\JMS\Serializer\Annotation\SkipWhenEmpty]
    public ?PlanTrialConfig $trialConfig = null;
    
	public function __construct()
	{
		$this->basePlan = null;
		$this->basePlanId = null;
		$this->createdAt = new \DateTime();
		$this->currency = "";
		$this->defaultInvoiceMemo = null;
		$this->description = "";
		$this->discount = new \orb\orb\Models\Shared\Discount();
		$this->externalPlanId = null;
		$this->id = "";
		$this->invoicingCurrency = "";
		$this->minimum = new \orb\orb\Models\Shared\MinimumAmount();
		$this->name = "";
		$this->netTerms = null;
		$this->planPhases = null;
		$this->prices = [];
		$this->product = new \orb\orb\Models\Shared\PlanProduct();
		$this->trialConfig = null;
	}
}
